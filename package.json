{
  "name": "stargate-backend",
  "displayName": "Stargate Backend",
  "publisher": "brettanthonydixon",
  "license": "ISC",
  "licenseText": "ISC License",
  "icon": "icon.png",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:stargate-backend.start",
    "onCommand:stargate-backend.stop",
    "onCommand:stargate-backend.restart",
    "onCommand:stargate-backend.deploy",
    "onCommand:stargate-backend.build",
    "onCommand:stargate-backend.clean",
    "onCommand:stargate-backend.format",
    "onCommand:stargate-backend.lint",
    "onCommand:stargate-backend.test",
    "onCommand:stargate-backend.version",
    "onCommand:stargate-backend.publish",
    "onCommand:stargate-backend.update",
    "onCommand:stargate-backend.upgrade",
    "onCommand:stargate-backend.check",
    "onCommand:stargate-backend.checkup",
    "onCommand:stargate-backend.checkdown",
    "onCommand:stargate-backend.checkin",
    "onCommand:stargate-backend.checkout",
    "onCommand:stargate-backend.commit",
    "onCommand:stargate-backend.push",
    "onCommand:stargate-backend.pull",
    "onCommand:stargate-backend.clone",
    "onCommand:stargate-backend.install",
    "onCommand:stargate-backend.uninstall",
    "onCommand:stargate-backend.updateDependencies",
    "onCommand:stargate-backend.upgradeDependencies",
    "onCommand:stargate-backend.checkDependencies",
    "onCommand:stargate-backend.checkupDependencies",
    "onCommand:stargate-backend.checkdownDependencies",
    "onCommand:stargate-backend.checkinDependencies",
    "onCommand:stargate-backend.checkoutDependencies",
    "onCommand:stargate-backend.commitDependencies",
    "onCommand:stargate-backend.pushDependencies",
    "onCommand:stargate-backend.pullDependencies",
    "onCommand:stargate-backend.cloneDependencies",
    "onCommand:stargate-backend.installDependencies",
    "onCommand:stargate-backend.uninstallDependencies",
    "onCommand:stargate-backend.updateDevDependencies",
    "onCommand:stargate-backend.upgradeDevDependencies",
    "onCommand:stargate-backend.checkDevDependencies",
    "onCommand:stargate-backend.checkupDevDependencies",
    "onCommand:stargate-backend.checkdownDevDependencies",
    "onCommand:stargate-backend.checkinDevDependencies",
    "onCommand:stargate-backend.checkoutDevDependencies",
    "onCommand:stargate-backend.commitDevDependencies",
    "onCommand:stargate-backend.pushDevDependencies",
    "onCommand:stargate-backend.pullDevDependencies",
    "onCommand:stargate-backend.cloneDevDependencies",
    "onCommand:stargate-backend.installDevDependencies",
    "onCommand:stargate-backend.uninstallDevDependencies"
  ],
  "contributes": {
    "commands": [
      {
        "command": "stargate-backend.start",
        "title": "Start Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.stop",
        "title": "Stop Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.restart",
        "title": "Restart Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.deploy",
        "title": "Deploy Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.build",
        "title": "Build Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.clean",
        "title": "Clean Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.format",
        "title": "Format Stargate Backend",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.lint",
        "title": "Lint Stargate Backend",
        "category": "Stargate Backend",      
  "private": false,
  "version": "1.0.0",
  "description": "A simple Express backend ready for deployment on Render.",
  "main": "server.js",
  "keywords": [
    "express",
    "backend",
    "render",
    "nodejs"
  ],

  "engines": {
    "node": ">=14.0.0"
  },
  "scripts": {
    "start": "node server.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    "lint": "eslint .",
    "format": "prettier --write .",
    "clean": "rm -rf dist && echo 'Cleaned up dist folder!'",
    "prebuild": "npm run clean",
    "build": "mk dist && echo 'Build completed!' && npm run postbuild && npm run postinstall",
    "postbuild": "echo 'Build completed!'",
    "prepublishOnly": "npm run build",
    "prepack": "npm run build",
    "postpack": "echo 'Package created!'",
    "preversion": "npm run lint && npm run test",
    "version": "npm run build && git add dist && git commit -m 'chore: update dist files' && git tag -a v$npm_package_version -m 'Release v$npm_package_version'",
    "postversion": "echo 'Version $npm_package_version released!' && git push && git push --tags",
    "prepublish": "npm run build",
    "postpublish": "echo 'Package published!'",
    "preinstall": "npm run lint",
    "postinstall": "npm run build && npm run postbuild",
    "preuninstall": "npm run clean",
    "postuninstall": "echo 'Package uninstalled!'",
    "preupdate": "npm run lint",
    "postupdate": "echo 'Package updated!'",
    "preupgrade": "npm run lint",
    "postupgrade": "echo 'Package upgraded!'",
    "precheck": "npm run lint",
    "postcheck": "echo 'Package checked!'",
    "precheckup": "npm run lint",
    "postcheckup": "echo 'Package checked up!'",
    "precheckdown": "npm run lint",
    "postcheckdown": "echo 'Package checked down!'",
    "precheckin": "npm run lint",
    "postcheckin": "echo 'Package checked in!'",
    "precheckout": "npm run lint",
    "postcheckout": "echo 'Package checked out!'",
    "precommit": "npm run lint && npm run format",
    "prepush": "npm run lint && npm run test",
    "predeploy": "npm run build",
    "deploy": "echo 'Deploying to Render...' && render deploy",
    "postdeploy": "echo 'Deployment completed!'",
    "pretest": "npm run lint",
    "posttest": "echo 'Tests completed!'",
    "prettier": "prettier --check .",
    "prettier:write": "prettier --write .",
    "prettier:fix": "prettier --write .",
    "prettier:check": "prettier --check .",
    "prettier:format": "prettier --write .",
    "prettier:lint": "prettier --check .",
    "prettier:fix:lint": "prettier --write . && eslint",
    "prettier:check:lint": "prettier --check . && eslint",
    "prettier:format:lint": "prettier --write . && eslint",
    "prettier:write:lint": "prettier --write . && eslint",
    "prettier:fix:format": "prettier --write . && eslint",
    "prettier:check:format": "prettier --check . && eslint",
    "prettier:format:fix": "prettier --write . && eslint",
    "prettier:lint:fix": "prettier --check . && eslint",
    "prettier:lint:format": "prettier --write . && eslint",
    "prettier:write:format": "prettier --write . && eslint",
    "prettier:fix:check": "prettier --write . && eslint",
    "prettier:check:fix": "prettier --check . && eslint",
    "prettier:format:check": "prettier --write . && eslint",
    "prettier:lint:check": "prettier --check . && eslint",
    "prettier:write:check": "prettier --write . && eslint",
    "prettier:fix:lint:check": "prettier --write . && eslint",
    "prettier:check:lint:fix": "prettier --check . && eslint",
    "prettier:format:lint:check": "prettier --write . && eslint",
    "prettier:lint:format:check": "prettier --check . && eslint",
    "prettier:write:format:check": "prettier --write . && eslint",
    "prettier:fix:format:check": "prettier --write . && eslint",
    "prettier:check:format:fix": "prettier --check . && eslint",
    "prettier:format:fix:check": "prettier --write . && eslint",
    "prettier:lint:fix:check": "prettier --check . && eslint",
    "prettier:write:lint:check": "prettier --write . && eslint",
    "prettier:fix:lint:format": "prettier --write . && eslint",
    "prettier:check:lint:format": "prettier --check . && eslint",
    "prettier:format:lint:fix": "prettier --write . && eslint",
    "prettier:lint:format:fix": "prettier --check . && eslint",
    "prettier:write:format:fix": "prettier --write . && eslint",
    "prettier:fix:check:lint": "prettier --write . && eslint",
    "prettier:check:fix:lint": "prettier --check . && eslint",
    "prettier:format:check:lint": "prettier --write . && eslint",
    "prettier:lint:check:fix": "prettier --check . && eslint",
    "prettier:write:check:lint": "prettier --write . && eslint",
    "prettier:fix:lint:check:format": "prettier --write . && eslint",
    "prettier:check:lint:format:fix": "prettier --check . && eslint",
    "prettier:format:lint:check:fix": "prettier --write . && eslint",
    "prettier:lint:format:check:fix": "prettier --check . && eslint",
    "prettier:write:format:check:fix": "prettier --write . && eslint",
    "prettier:fix:format:check:lint": "prettier --write . && eslint",
    "prestart": "npm run build",
    "predev": "npm run build",
    "dev": "nodemon server.js",
    "start:prod": "node server.js"
  },
    "commands": {
      "stargate-backend.start": {
        "title": "Start Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.stop": {
        "title": "Stop Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.restart": {
        "title": "Restart Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.deploy": {
        "title": "Deploy Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.build": {
        "title": "Build Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.clean": {
        "title": "Clean Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.format": {
        "title": "Format Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.lint": {
        "title": "Lint Stargate Backend",
        "category": "Stargate Backend"
      },
    "configurationDefaults": {
      "editor.tabSize": 2,
      "editor.insertSpaces": true,
      "editor.detectIndentation": false,
      "files.trimTrailingWhitespace": true,
      "files.insertFinalNewline": true,
      "files.autoSave": "onWindowChange"
  }, 
      "stargate-backend.test": {
        "title": "Test Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.version": {
        "title": "Version Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.publish": {
        "title": "Publish Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.update": {
        "title": "Update Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.upgrade": {
        "title": "Upgrade Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.check": {
        "title": "Check Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.checkup": {
        "title": "Check Up Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.checkdown": {
        "title": "Check Down Stargate Backend",
        "category": "Stargate Backend"
      },
      "stargate-backend.checkin": {
        "title": "Check In Stargate Backend",
        "category": "Stargate Backend"
      },
      
    "configuration": [
      {
        "title": "Stargate Backend",
        "properties": {
          "stargateBackend.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable Stargate Backend features."
          },
          "stargateBackend.autoStart": {
            "type": "boolean",
            "default": true,
            "description": "Automatically start Stargate Backend on VS Code startup."
          },
          "stargateBackend.autoDeploy": {
            "type": "boolean",
            "default": true,
            "description": "Automatically deploy Stargate Backend on changes."
          },
          "stargateBackend.autoBuild": {
            "type": "boolean",
            "default": true,
            "description": "Automatically build Stargate Backend on changes."
          },
          "stargateBackend.autoFormat": {
            "type": "boolean",
            "default": true,
            "description": "Automatically format Stargate Backend files on save."
          },    
          "stargateBackend.autoLint": {
            "type": "boolean",
            "default": true,
            "description": "Automatically lint Stargate Backend files on save."
          },
          "stargateBackend.autoTest": {
            "type": "boolean",    
            "default": true,
            "description": "Automatically run tests for Stargate Backend on save."
          },
          "stargateBackend.autoVersion": {
            "type": "boolean",
            "default": true,          
            "description": "Automatically version Stargate Backend on changes."
          },
          "stargateBackend.autoPublish": {
            "type": "boolean",
            "default": true,
            "description": "Automatically publish Stargate Backend on changes."
          },
          "stargateBackend.autoUpdate": {
            "type": "boolean",
            "default": true,
            "description": "Automatically update Stargate Backend on changes."
          },
          "stargateBackend.autoUpgrade": {
            "type": "boolean",
            "default": true,
            "description": "Automatically upgrade Stargate Backend on changes."
          },
          "stargateBackend.autoCheck": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check Stargate Backend on changes."
          },
          "stargateBackend.autoCheckup": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check up Stargate Backend on changes."
          },
          "stargateBackend.autoCheckdown": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check down Stargate Backend on changes."
          },
          "stargateBackend.autoCheckin": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check in Stargate Backend on changes."
          },
          "stargateBackend.autoCheckout": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check out Stargate Backend on changes."
          },
          "stargateBackend.autoCommit": {
            "type": "boolean",
            "default": true,
            "description": "Automatically commit Stargate Backend changes."
          },
          "stargateBackend.autoPush": {
            "type": "boolean",
            "default": true,
            "description": "Automatically push Stargate Backend changes."
          },
          "stargateBackend.autoPull": {
            "type": "boolean",
            "default": true,
            "description": "Automatically pull Stargate Backend changes."
          },
          "stargateBackend.autoClone": {
            "type": "boolean",
            "default": true,
            "description": "Automatically clone Stargate Backend repository."
          },
          "stargateBackend.autoInstall": {
            "type": "boolean",
            "default": true,
            "description": "Automatically install Stargate Backend dependencies."
          },
          "stargateBackend.autoUninstall": {
            "type": "boolean",
            "default": true,
            "description": "Automatically uninstall Stargate Backend dependencies."
          },
          "stargateBackend.autoUpdateDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically update Stargate Backend dependencies."
          },
          "stargateBackend.autoUpgradeDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically upgrade Stargate Backend dependencies."
          },
          "stargateBackend.autoCheckDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check Stargate Backend dependencies."
          },
          "stargateBackend.autoCheckupDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check up Stargate Backend dependencies."
          },
          "stargateBackend.autoCheckdownDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check down Stargate Backend dependencies."
          },
          "stargateBackend.autoCheckinDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check in Stargate Backend dependencies."    
          },
          "stargateBackend.autoCheckoutDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically check out Stargate Backend dependencies."     
          },
          "stargateBackend.autoCommitDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically commit Stargate Backend dependency changes."
          },
          "stargateBackend.autoPushDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically push Stargate Backend dependency changes."
          },
          "stargateBackend.autoPullDependencies": {
            "type": "boolean",
            "default": true,
            "description": "Automatically pull Stargate Backend dependency changes."
          }
        }
      },
      {
        "command": "stargate-backend.autoCloneDependencies",
        "title": "Automatically Clone Stargate Backend Dependency Repository",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoInstallDependencies",
        "title": "Automatically Install Stargate Backend Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoUninstallDependencies",
        "title": "Automatically Uninstall Stargate Backend Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoUpdateDevDependencies",
        "title": "Automatically Update Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoUpgradeDevDependencies",
        "title": "Automatically Upgrade Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoCheckDevDependencies",
        "title": "Automatically Check Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoCheckupDevDependencies",
        "title": "Automatically Check Up Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoCheckdownDevDependencies",
        "title": "Automatically Check Down Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoCheckinDevDependencies",
        "title": "Automatically Check In Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoCheckoutDevDependencies",
        "title": "Automatically Check Out Stargate Backend Dev Dependencies",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoCommitDevDependencies",
        "title": "Automatically Commit Stargate Backend Dev Dependency Changes",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoPushDevDependencies",
        "title": "Automatically Push Stargate Backend Dev Dependency Changes",
        "category": "Stargate Backend"
      },
      {
        "command": "stargate-backend.autoPullDevDependencies",
        "title": "Automatically Pull Stargate Backend Dev Dependency Changes",
        "category": "Stargate Backend"
      }
    ]
  },
  "repository": {
    "type": "git",
    "url": "stargate"
  },
  "bugs": {
    "url": "bugs"
  },
  "homepage": "",
  "author": "Brett Anthony Dixon",
  "contributors": [
    {
      "name": "Brett Anthony Dixon",
      "email": "b@brettanthonydixon.com",
      "url": "https://brettanthonydixon.com"
    }
  ],
  "dependencies": {
    "express": "^4.17.1",
    "body-parser": "^1.20.2",
    "dotenv": "^16.4.5",
    "openai": "^4.50.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.7",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^8.0.0",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^6.0.0",
    "eslint-plugin-standard": "^5.0.0",
    "eslint-plugin-json": "^3.1.0",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-react": "^7.27.1",
    "eslint-plugin-react-hooks": "^4.0.0",
    "eslint-plugin-unicorn": "^39.0.0",
    "eslint-plugin-import-helpers": "^2.0.0",
    "eslint-plugin-security": "^1.4.0",
    "eslint-plugin-jsdoc": "^39.0.0",
    "eslint-plugin-html": "^6.0.0",
    "eslint-plugin-markdown": "^2.0.0",
    "eslint-plugin-yml": "^6.0.0",
    "eslint-plugin-graphql": "^4.0.0",
    "eslint-plugin-compat": "^4.0.0",
    "eslint-plugin-vue": "^9.0.0",
    "eslint-plugin-angular": "^2.0.0",
    "eslint-plugin-backbone": "^1.0.0",
    "eslint-plugin-ember": "^9.0.0",
    "eslint-plugin-mocha": "^9.0.0",
    "eslint-plugin-jest": "^25.0.0",
    "eslint-plugin-cypress": "^2.0.0",
    "eslint-plugin-jasmine": "^4.0.0",
    "eslint-plugin-qunit": "^4.0.0",
    "eslint-plugin-ava": "^4.0.0",
    "eslint-plugin-jest-dom": "^4.0.0"
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "plugin:import/errors",
      "plugin:import/warnings",
      "plugin:node/recommended",
      "plugin:promise/recommended",
      "plugin:standard/recommended",
      "plugin:json/recommended",
      "plugin:jsx-a11y/recommended",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended",
      "plugin:unicorn/recommended",
      "plugin:import-helpers/recommended",
      "plugin:security/recommended",
      "plugin:jsdoc/recommended",
      "plugin:html/recommended",
      "plugin:markdown/recommended",
      "plugin:yml/recommended",
      "plugin:graphql/recommended",
      "plugin:compat/recommended",
      "plugin:vue/recommended",
      "plugin:angular/recommended",
      "plugin:backbone/recommended",
      "plugin:ember/recommended",
      "plugin:mocha/recommended",
      "plugin:jest/recommended",
      "plugin:cypress/recommended",
      "plugin:jasmine/recommended",
      "plugin:qunit/recommended",
      "plugin:ava/recommended",
      "plugin:jest-dom/recommended"
    ],
    "parserOptions": {
      "ecmaVersion": 2020,
      "sourceType": "module",
      "ecmaFeatures": {
        "jsx": true
      }
    },
    "env": {
      "browser": true,
      "node": true,
      "es2020": true,
      "jest": true,
      "cypress/globals": true,
      "mocha": true,
      "jasmine": true,
      "qunit": true,
      "ava": true
    },
    "plugins": [
      "import",
      "node",
      "promise",
      "standard",
      "json",
      "jsx-a11y",
      "react",
      "react-hooks",
      "unicorn",
      "import-helpers",
      "security",
      "jsdoc",
      "html",
      "markdown",
      "yml",
      "graphql",
      "compat",
      "vue",
      "angular",
      "backbone",
      "ember",
      "mocha",
      "jest",
      "cypress",
      "jasmine",
      "qunit",
      "ava",
      "jest-dom"
    ],
    "rules": {
      "no-console": "warn",
      "no-unused-vars": "warn",
      "import/no-unresolved": "error",
      "import/named": "error",
      "import/default": "error",
      "import/namespace": "error",
      "import/no-named-as-default": "error",
      "import/no-named-as-default-member": "error",
      "import/no-duplicates": "error",
      "import/no-extraneous-dependencies": "error",
      "import/no-mutable-exports": "error",
      "import/no-named-export": "error",
      "import/no-default-export": "error",
      "import/no-anonymous-default-export": "error",
      "import/order": ["error", {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "always"
      }],
      "node/no-unsupported-features/es-syntax": "error",
      "node/no-missing-import": "error",
      "node/no-missing-require": "error",
      "promise/always-return": "error",
      "promise/catch-or-return": "error",
      "promise/no-return-wrap": "error",
      "standard/no-callback-literal": "error",
      "standard/no-async-promise-executor": "error",
      "json/*": "error",
      "jsx-a11y/anchor-is-valid": "warn",
      "react/jsx-uses-react": "warn",
      "react/jsx-uses-vars": "warn",
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "warn",
      "unicorn/prevent-abbreviations": "warn",
      "unicorn/no-abusive-eslint-disable": "error",
      "import-helpers/order-imports": ["error", {
        "newlinesBetween": "always",
        "groups": [
          "/^react/",
          "/^@?\\w",
          "module",
          "/^\\./",
          "parent",
          "sibling",
          "index"
        ],
        "alphabetize": {
          "order": "asc",
          "ignoreCase": true
        }
      }],
      "security/detect-object-injection": "off",
      "jsdoc/check-alignment": "warn",
      "jsdoc/check-indentation": "warn",
      "jsdoc/check-param-names": "warn",
      "jsdoc/check-tag-names": "warn",
      "jsdoc/check-types": "warn",
      "jsdoc/implements-on-classes": "warn",
      "jsdoc/match-description": "warn",
      "jsdoc/no-bad-blocks": "warn",
      "jsdoc/no-defaults": "warn",
      "jsdoc/no-multi-asterisks": "warn",
      "jsdoc/no-restricted-syntax": "warn",
      "jsdoc/no-types": "warn",
      "jsdoc/require-description": "warn",
      "jsdoc/require-hyphen-before-param-description": "warn",
      "jsdoc/require-jsdoc": "warn",
      "jsdoc/require-param": "warn",
      "jsdoc/require-param-description": "warn",
      "jsdoc/require-param-name": "warn",
      "jsdoc/require-param-type": "warn",
      "jsdoc/require-returns": "warn",
      "jsdoc/require-returns-check": "warn",
      "jsdoc/require-returns-description": "warn",
      "jsdoc/require-returns-type": "warn",
      "html/indent": "warn",
      "markdown/indent": "warn",
      "yml/indent": "warn",
      "graphql/template-strings": ["error", {
        "env": "apollo",
        "schemaJson": {
          "request": "http://localhost:4000/graphql"
        }
      }],
      "compat/compat": "error",
      "vue/html-indent": "warn",
      "angular/controller-as": "warn",
      "angular/no-service-method": "warn",
      "backbone/no-underscore-methods": "warn",
      "ember/no-observers": "warn",
      "ember/no-actions-hash": "warn",
      "mocha/no-exclusive-tests": "error",
      "jest/no-disabled-tests": "warn",
      "jest/no-focused-tests": "error",
      "cypress/no-assigning-return-values": "warn",
      "jasmine/no-focused-tests": "error",
      "qunit/no-async-test-outside-module": "warn",
      "ava/no-ignored-test-files": "warn",
      "jest-dom/prefer-checked": "warn",
      "jest-dom/prefer-empty": "warn",
      "jest-dom/prefer-enabled-disabled": "warn",
      "jest-dom/prefer-in-document": "warn",
      "jest-dom/prefer-required": "warn",
      "jest-dom/prefer-to-have-attribute": "warn",
      "jest-dom/prefer-to-have-class": "warn",
      "jest-dom/prefer-to-have-style": "warn",
      "jest-dom/prefer-to-have-text-content": "warn",
      "jest-dom/prefer-to-have-value": "warn"
    }
  },
  "eslintIgnore": [
    "node_modules",
    "dist",
    "coverage",
    "build",
    "public",
    "logs",
    "temp",
    "tmp",
    "cache",
    "debug",
    "debug.log",
    "npm-debug.log",
    "yarn-debug.log",
    "yarn-error.log",
    ".eslintcache",
    ".prettiercache",
    ".cache",
    ".next",
    ".nuxt",
    ".storybook",
    ".vscode",
    ".idea",
    ".git",
    ".github",
    ".gitignore",
    ".gitlab-ci.yml",
    ".travis.yml",
    ".circleci",
    ".env",
    ".env.local",
    ".env.development",
    ".env.production",
    ".env.test",
    ".env.example",
    ".env.sample",
    ".env.template",
    ".env.dist",
    ".env.production.local",
    ".env.development.local",
    ".env.test.local",
    ".env.example.local",
    ".env.sample.local",
    ".env.template.local",
    ".env.dist.local",
    ".env.production.example",
    ".env.development.example",
    ".env.test.example",
    ".env.sample.example",
    ".env.template.example",
    ".env.dist.example",
    ".env.production.sample",
    ".env.development.sample",
    ".env.test.sample",
    ".env.example.sample",
    ".env.template.sample",
    ".env.dist.sample",
    ".env.production.template",
    ".env.development.template",
    ".env.test.template",
    ".env.sample.template",
    ".env.example.template",
    ".env.dist.template",
    ".env.production.dist",
    ".env.development.dist",
    ".env.test.dist",
    ".env.sample.dist",
    ".env.example.dist",
    ".env.template.dist",
    ".env.dist.dist",
    ".env.production.json",
    ".env.development.json",
    ".env.test.json",
    ".env.sample.json",
    ".env.example.json",
    ".env.template.json",
    ".env.dist.json",
    ".env.production.yaml",
    ".env.development.yaml",
    ".env.test.yaml",
    ".env.sample.yaml",
    ".env.example.yaml",
    ".env.template.yaml",
    ".env.dist.yaml",
    ".env.production.yml",
    ".env.development.yml",
    ".env.test.yml",
    ".env.sample.yml",
    ".env.example.yml",
    ".env.template.yml",
    ".env.dist.yml",
    ".env.production.env",
    ".env.development.env",
    ".env.test.env",
    ".env.sample.env",
    ".env.example.env",
    ".env.template.env",
    ".env.dist.env",
    ".env.production.sh",
    ".env.development.sh",
    ".env.test.sh",
    ".env.sample.sh",
    ".env.example.sh",
    ".env.template.sh",
    ".env.dist.sh",
    ".env.production.bat",
    ".env.development.bat",
    ".env.test.bat",
    ".env.sample.bat",
    ".env.example.bat",
    ".env.template.bat",
    ".env.dist.bat",
    ".env.production.ps1",
    ".env.development.ps1",
    ".env.test.ps1",
    ".env.sample.ps1",
    ".env.example.ps1",
    ".env.template.ps1",
    ".env.dist.ps1",
    ".env.production.cmd",
    ".env.development.cmd",
    ".env.test.cmd",
    ".env.sample.cmd",
    ".env.example.cmd",
    ".env.template.cmd",
    ".env.dist.cmd",
    ".env.production.config",
    ".env.development.config",
    ".env.test.config",
    ".env.sample.config",
    ".env.example.config",
    ".env.template.config",
    ".env.dist.config",
    ".env.production.json5",
    ".env.development.json5",
    ".env.test.json5",
    ".env.sample.json5",
    ".env.example.json5",
    ".env.template.json5",
    ".env.dist.json5",
    ".env.production.yaml5",
    ".env.development.yaml5",
    ".env.test.yaml5",
    ".env.sample.yaml5",
    ".env.example.yaml5",
    ".env.template.yaml5",
    ".env.dist.yaml5",
    ".env.production.yml5",
    ".env.development.yml5",
    ".env.test.yml5",
    ".env.sample.yml5",
    ".env.example.yml5",
    ".env.template.yml5",
    ".env.dist.yml5",
    ".env.production.env5",
    ".env.development.env5",
    ".env.test.env5",
    ".env.sample.env5",
    ".env.example.env5",
    ".env.template.env5",
    ".env.dist.env5",
    ".env.production.sh5",
    ".env.development.sh5",
    ".env.test.sh5",
    ".env.sample.sh5",
    ".env.example.sh5",
    ".env.template.sh5",
    ".env.dist.sh5",
    ".env.production.bat5",
    ".env.development.bat5",
    ".env.test.bat5",
    ".env.sample.bat5",
    ".env.example.bat5",
    ".env.template.bat5",
    ".env.dist.bat5",
    ".env.production.ps15",
    ".env.development.ps15",
    ".env.test.ps15",
    ".env.sample.ps15",
    ".env.example.ps15",
    ".env.template.ps15",
    ".env.dist.ps15",
    ".env.production.cmd5",
    ".env.development.cmd5",
    ".env.test.cmd5",
    ".env.sample.cmd5",
    ".env.example.cmd5",
    ".env.template.cmd5",
    ".env.dist.cmd5",
    ".env.production.config5",
    ".env.development.config5",
    ".env.test.config5",
    ".env.sample.config5",
    ".env.example.config5",
    ".env.template.config5",
    ".env.dist.config5"
  ]
  },
  "prettier": {
    "singleQuote": true,
    "trailingComma": "es5",
    "tabWidth": 2,
    "semi": true,
    "printWidth": 80,
    "useTabs": false,
    "arrowParens": "always",
    "bracketSpacing": true,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false,
    "endOfLine": "lf",
    "proseWrap": "preserve",
    "htmlWhitespaceSensitivity": "css",
    "quoteProps": "as-needed",
    "embeddedLanguageFormatting": "auto",
    "requirePragma": false,
    "insertPragma": false,
    "tabIndentation": false,
    "vueIndentScriptAndStyle": false,
    "bracketSameLine": false,
    "jsxBracketSameLine": false,
    "arrowParens": "avoid",
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "ignore",
    "endOfLine": "lf",
    "singleAttributePerLine": false,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false,
    "printWidth": 80,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "bracketSpacing": true,
    "bracketSameLine": false,
    "jsxBracketSameLine": false,
    "arrowParens": "always",
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "endOfLine": "lf",
    "singleAttributePerLine": false,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false,
    "printWidth": 80,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "bracketSpacing": true,
    "bracketSameLine": false,
    "jsxBracketSameLine": false,
    "arrowParens": "always",
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "endOfLine": "lf",
    "singleAttributePerLine": false,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false,
    "printWidth": 80,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "bracketSpacing": true,
    "bracketSameLine": false,
    "jsxBracketSameLine": false,
    "arrowParens": "always",
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "endOfLine": "lf",
    "singleAttributePerLine": false,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false,
    "printWidth": 80,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "bracketSpacing": true,
    "bracketSameLine": false,
    "jsxBracketSameLine": false,
    "arrowParens": "always",
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "endOfLine": "lf",
    "singleAttributePerLine": false,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false,
    "printWidth": 80,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false,
    "proseWrap": "preserve",
    "quoteProps": "as-needed",
    "bracketSpacing": true,
    "bracketSameLine": false,
    "jsxBracketSameLine": false,
    "arrowParens": "always",
    "embeddedLanguageFormatting": "auto",
    "htmlWhitespaceSensitivity": "css",
    "endOfLine": "lf",
    "singleAttributePerLine": false,
    "jsxSingleQuote": false,
    "jsxBracketSameLine": false
  },
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "format": "prettier --write .",
    "test": "jest"
  },
    "env": {
      "browser": true,
      "node": true,
      "es2020": true,
      "jest": true,
      "cypress/globals": true,
      "mocha": true,
      "jasmine": true,
      "qunit": true,
      "ava": true
    },
    "rules": {
      "no-console": "warn",
      "no-unused-vars": "warn",
      "import/no-unresolved": "error",
      "import/named": "error",
      "import/default": "error",
      "import/namespace": "error",
      "import/no-named-as-default": "error",
      "import/no-named-as-default-member": "error",
      "import/no-duplicates": "error",
      "import/no-extraneous-dependencies": "error",
      "import/no-mutable-exports": "error",
      "import/no-named-export": "error",
      "import/no-default-export": "error",
      "import/no-anonymous-default-export": "error",
      "import/order": ["error", {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "always"
      }],
      "node/no-unsupported-features/es-syntax": "error",
      "node/no-missing-import": "error",
      "node/no-missing-require": "error",
      "promise/always-return": "error",
      "promise/catch-or-return": "error",
      "promise/no-return-wrap": "error",
      "standard/no-callback-literal": "error",
      "standard/no-async-promise-executor": "error",
      "json/*": "error",
      "jsx-a11y/anchor-is-valid": "warn",
      "react/jsx-uses-react": "warn",
      "react/jsx-uses-vars": "warn",
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "warn",
      "unicorn/prevent-abbreviations": "warn",
      "unicorn/no-abusive-eslint-disable": "error",
      "import-helpers/order-imports": ["error", {
        "newlinesBetween": "always",
        "groups": [
          "/^react/",
          "/^@?\\w",
          "module",
          "/^\\./",
          "parent",
          "sibling",
          "index"
        ],
        "alphabetize": {
          "order": "asc",
          "ignoreCase": true
        }
      }],
      "security/detect-object-injection": "off",
      "jsdoc/check-alignment": "warn",
      "jsdoc/check-indentation": "warn",
      "jsdoc/check-param-names": "warn",
      "jsdoc/check-tag-names": "warn",
      "jsdoc/check-types": "warn",
      "jsdoc/implements-on-classes": "warn",
      "jsdoc/match-description": "warn",
      "jsdoc/no-bad-blocks": "warn",
      "jsdoc/no-defaults": "warn",
      "jsdoc/no-multi-asterisks": "warn",
      "jsdoc/no-restricted-syntax": "warn",
      "jsdoc/no-types": "warn",
      "jsdoc/require-description": "warn",
      "jsdoc/require-hyphen-before-param-description": "warn",
      "jsdoc/require-jsdoc": "warn",
      "jsdoc/require-param": "warn",
      "jsdoc/require-param-description": "warn",
      "jsdoc/require-param-name": "warn",
      "jsdoc/require-param-type": "warn",
      "jsdoc/require-returns": "warn",
      "jsdoc/require-returns-check": "warn",
      "jsdoc/require-returns-description": "warn",
      "jsdoc/require-returns-type": "warn",
      "html/indent": "warn",
      "markdown/indent": "warn",
      "yml/indent": "warn",
      "graphql/template-strings": ["error", {
        "env": "apollo",
        "schemaJson": {
          "request": "http://localhost:4000/graphql"
        }
      }],
      "compat/compat": "error",
      "vue/html-indent": "warn",
      "angular/controller-as": "warn",
      "angular/no-service-method": "warn",
      "backbone/no-underscore-methods": "warn",
      "ember/no-observers": "warn",
      "ember/no-actions-hash": "warn",
      "mocha/no-exclusive-tests": "error",
      "jest/no-disabled-tests": "warn",
      "jest/no-focused-tests": "error",
      "cypress/no-assigning-return-values": "warn",
      "jasmine/no-focused-tests": "error",
      "qunit/no-async-test-outside-module": "warn",
      "ava/no-ignored-test-files": "warn",
      "jest-dom/prefer-checked": "warn",
      "jest-dom/prefer-empty": "warn",
      "jest-dom/prefer-enabled-disabled": "warn",
      "jest-dom/prefer-in-document": "warn",
      "jest-dom/prefer-required": "warn",
      "jest-dom/prefer-to-have-attribute": "warn",
      "jest-dom/prefer-to-have-class": "warn",
      "jest-dom/prefer-to-have-style": "warn",
      "jest-dom/prefer-to-have-text-content": "warn",
      "jest-dom/prefer-to-have-value": "warn"
    },
      "ignorePatterns": [
        "node_modules/",
        "dist/",
        "coverage/",
        "build/",
        "public/",
        "logs/",
        "temp/",
        "tmp/",
        "cache/",
        "debug/",
        "debug.log",
        "npm-debug.log",
        "yarn-debug.log",
        "yarn-error.log",
        ".eslintcache",
        ".prettiercache",
        ".cache",
        ".next",
        ".nuxt",
        ".storybook",
        ".vscode",
        ".idea",
        ".git",
        ".github",
        ".gitignore"
      ],

      "plugins": [
        "import",
        "node",
        "promise",
        "standard",
        "json",
        "jsx-a11y",
        "react",
        "react-hooks",
        "unicorn",
        "import-helpers",
        "security",
        "jsdoc",
        "html",
        "markdown",
        "yml",
        "graphql",
        "compat",
        "vue",
        "angular",
        "backbone",
        "ember",
        "mocha",
        "jest",
        "cypress",
        "jasmine",
        "qunit",
        "ava",
        "jest-dom"
      ]
    }
  },
  "name": "stargate-backend",
  "version": "1.0.0",
  "description": "A backend service for Stargate, providing APIs and functionality for the Stargate application.",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:ci": "jest --ci",
    "build": "webpack --config webpack.config.js",
    "prettier": "prettier --write '**/*.{js,jsx,json,md,yml,yaml,html}'",
    "prettier:check": "prettier --check '**/*.{js,jsx,json,md,yml,yaml,html}'",
    "format": "prettier --write '**/*.{js,jsx,json,md,yml,yaml,html}'",
    "format:check": "prettier --check '**/*.{js,jsx,json,md,yml,yaml,html}'",
    "security": "npx eslint --plugin security .",
    "graphql": "eslint --plugin graphql .",
    "vue": "eslint --plugin vue .",
    "angular": "eslint --plugin angular .",
    "backbone": "eslint --plugin backbone .",
    "ember": "eslint --plugin ember .",
    "mocha": "eslint --plugin mocha .",
    "jest": "eslint --plugin jest .",
    "cypress": "eslint --plugin cypress .",
    "jasmine": "eslint --plugin jasmine .",
    "qunit": "eslint --plugin qunit .",
    "ava": "eslint --plugin ava .",
    "jest-dom": "eslint --plugin jest-dom ."
  },
      "overrides": [
    "extends": [
        "eslint:recommended",
        "plugin:import/errors", 
        "plugin:import/warnings",
        "plugin:node/recommended",
        "plugin:promise/recommended",
        "plugin:standard/recommended",
        "plugin:json/recommended",
        "plugin:jsx-a11y/recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:unicorn/recommended",
        "plugin:import-helpers/recommended",
        "plugin:security/recommended",
        "plugin:jsdoc/recommended",
        "plugin:html/recommended",
        "plugin:markdown/recommended",
        "plugin:yml/recommended",
        "plugin:graphql/recommended",
        "plugin:compat/recommended",
        "plugin:vue/recommended",
        "plugin:angular/recommended",
        "plugin:backbone/recommended",
        "plugin:ember/recommended",
        "plugin:mocha/recommended",
        "plugin:jest/recommended",
        "plugin:cypress/recommended",
        "plugin:jasmine/recommended",
        "plugin:qunit/recommended",
        "plugin:ava/recommended",
        "plugin:jest-dom/recommended"
      ]
      ],

      "parserOptions": {
        "ecmaVersion": 2020,
        "sourceType": "module",
        "ecmaFeatures": {
          "jsx": true
        }
      },
      "env": {
        "browser": true,
        "node": true,
        "es2020": true,
        "jest": true,
        "cypress/globals": true,
        "mocha": true,
        "jasmine": true,
        "qunit": true,
        "ava": true
      },
      "plugins": [
        "import",
        "node",
        "promise",
        "standard",
        "json",
        "jsx-a11y",
        "react",
        "react-hooks",
        "unicorn",
        "import-helpers",
        "security",
        "jsdoc",
        "html",
        "markdown",
        "yml",
        "graphql",
        "compat",
        "vue",
        "angular",
        "backbone",
        "ember",
        "mocha",
        "jest",
        "cypress",
        "jasmine",
        "qunit",
        "ava",
        "jest-dom"
      ],
      "rules": {
        "no-console": "warn",
        "no-unused-vars": "warn",
        "import/no-unresolved": "error",
        "import/named": "error",
        "import/default": "error",
        "import/namespace": "error",
        "import/no-named-as-default": "error",
        "import/no-named-as-default-member": "error",
        "import/no-duplicates": "error",
        "import/no-extraneous-dependencies": "error",
        "import/no-mutable-exports": "error",
        "import/no-named-export": "error",
        "import/no-default-export": "error",
        "import/no-anonymous-default-export": "error",
        "import/order": ["error", {
          "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
          "newlines-between": "always"
        }],
        "node/no-unsupported-features/es-syntax": "error",
        "node/no-missing-import": "error",
        "node/no-missing-require": "error",
        "promise/always-return": "error",
        "promise/catch-or-return": "error",
        "promise/no-return-wrap": "error",
        "standard/no-callback-literal": "error",
        "standard/no-async-promise-executor": "error",
        "json/*": "error",
        "jsx-a11y/anchor-is-valid": "warn",
        "react/jsx-uses-react": "warn",
        "react/jsx-uses-vars": "warn",
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn",
        "unicorn/prevent-abbreviations": "warn",
        "unicorn/no-abusive-eslint-disable": "error",
        "import-helpers/order-imports": ["error", {
          "newlinesBetween": "always",
          "groups": [
            "/^react/",
            "/^@?\\w",
            "module",
            "/^\\./",
            "parent",
            "sibling",
            "index"
          ],
          "alphabetize": {
            "order": "asc",
            "ignoreCase": true
          } 
        }],
        "security/detect-object-injection": "off",
        "jsdoc/check-alignment": "warn",
        "jsdoc/check-indentation": "warn",
        "jsdoc/check-param-names": "warn",
        "jsdoc/check-tag-names": "warn",
        "jsdoc/check-types": "warn",
        "jsdoc/implements-on-classes": "warn",
        "jsdoc/match-description": "warn",
        "jsdoc/no-bad-blocks": "warn",
        "jsdoc/no-defaults": "warn",
        "jsdoc/no-multi-asterisks": "warn",
        "jsdoc/no-restricted-syntax": "warn",
        "jsdoc/no-types": "warn",
        "jsdoc/require-description": "warn",
        "jsdoc/require-hyphen-before-param-description": "warn",
        "jsdoc/require-jsdoc": "warn",
        "jsdoc/require-param": "warn",
        "jsdoc/require-param-description": "warn",
        "jsdoc/require-param-name": "warn",
        "jsdoc/require-param-type": "warn",
        "jsdoc/require-returns": "warn",
        "jsdoc/require-returns-check": "warn",
        "jsdoc/require-returns-description": "warn",
        "jsdoc/require-returns-type": "warn",
        "html/indent": "warn",
        "markdown/indent": "warn",
        "yml/indent": "warn",
        "graphql/template-strings": ["error", {
          "env": "apollo",
          "schemaJson": {
            "request": "http://localhost:4000/graphql"
          }
          }], 
          "compat/compat": "error",
        "vue/html-indent": "warn",
        "angular/controller-as": "warn",
        "angular/no-service-method": "warn",
        "backbone/no-underscore-methods": "warn",
        "ember/no-observers": "warn", 
        "ember/no-actions-hash": "warn",
        "mocha/no-exclusive-tests": "error",
        "jest/no-disabled-tests": "warn",
        "jest/no-focused-tests": "error",
        "cypress/no-assigning-return-values": "warn",
        "jasmine/no-focused-tests": "error",
        "qunit/no-async-test-outside-module": "warn",
        "ava/no-ignored-test-files": "warn",
        "jest-dom/prefer-checked": "warn",
        "jest-dom/prefer-empty": "warn",
        "jest-dom/prefer-enabled-disabled": "warn",
        "jest-dom/prefer-in-document": "warn",
        "jest-dom/prefer-required": "warn",
        "jest-dom/prefer-to-have-attribute": "warn",
        "jest-dom/prefer-to-have-class": "warn",
        "jest-dom/prefer-to-have-style": "warn",
        "jest-dom/prefer-to-have-text-content": "warn",
        "jest-dom/prefer-to-have-value": "warn"
      }
    }
  },
  "keywords": [
    "stargate",
    "backend",
    "nodejs",
    "express",
    "api",
    "graphql",
    "rest",
    "microservices",
    "serverless",
    "cloud",
    "docker",
    "kubernetes",
    "aws",
    "azure",
    "gcp",
    "ci",
    "cd",
    "devops",
    "automation",
    "testing",
    "linting",
    "formatting",
    "eslint",
    "prettier",
    "babel",
    "webpack",
    "babel-loader",
    "webpack-cli",
    "babel-preset-env",
    "babel-preset-react",
    "babel-preset-stage-0",
    "babel-plugin-transform-runtime",
    "babel-plugin-transform-decorators-legacy",
    "babel-plugin-transform-class-properties",
    "babel-plugin-transform-object-rest-spread",
    "babel-plugin-transform-async-to-generator",
    "babel-plugin-transform-regenerator",
    "babel-plugin-transform-react-jsx",
    "babel-plugin-transform-react-display-name",
    "babel-plugin-transform-react-constant-elements",
    "babel-plugin-transform-react-inline-elements",
    "babel-plugin-transform-react-remove-prop-types",
    "babel-plugin-transform-react-pure-class-to-functional-component",
    "babel-plugin-transform-react-remove-prop-types",
    "babel-plugin-transform-react-remove-prop-types-legacy",
    "babel-plugin-transform-react-remove-prop-types-immutable",
    "babel-plugin-transform-react-remove-prop-types-immutable-legacy",
    "babel-plugin-transform-react-remove-prop-types-immutable-modern",
    "babel-plugin-transform-react-remove-prop-types-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-immutable",
    "babel-plugin-transform-react-remove-prop-types-modern-immutable-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-immutable-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-immutable",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-immutable-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-immutable-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-immutable",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-immutable-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-immutable-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-modern",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-modern-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-modern-immutable",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-modern-immutable-legacy",
    "babel-plugin-transform-react-remove-prop-types-modern-modern-modern-modern-immutable-modern",
},